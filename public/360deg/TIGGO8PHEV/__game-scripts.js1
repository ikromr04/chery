var Follow = pc.createScript("follow");
Follow.attributes.add("target", {
	type: "entity",
	title: "Target",
	description: "The Entity to follow"
}), Follow.attributes.add("distance", {
	type: "number",
	default: 4,
	title: "Distance",
	description: "How far from the Entity should the follower be"
}), Follow.prototype.initialize = function() {
	this.vec = new pc.Vec3
}, Follow.prototype.update = function(t) {
	if(this.target) {
		var e = this.target.getPosition();
		e.x += .75 * this.distance, e.y += 1 * this.distance, e.z += .75 * this.distance, this.vec.lerp(this.vec, e, .1), this.entity.setPosition(this.vec)
	}
};
var Movement = pc.createScript("movement");
Movement.attributes.add("speed", {
	type: "number",
	default: .1,
	min: .05,
	max: .5,
	precision: 2,
	description: "Controls the movement speed"
}), Movement.prototype.initialize = function() {
	this.force = new pc.Vec3
}, Movement.prototype.update = function(e) {
	var t = 0,
		s = 0;
	if(this.app.keyboard.isPressed(pc.KEY_LEFT) && (t = -this.speed), this.app.keyboard.isPressed(pc.KEY_RIGHT) && (t += this.speed), this.app.keyboard.isPressed(pc.KEY_UP) && (s = -this.speed), this.app.keyboard.isPressed(pc.KEY_DOWN) && (s += this.speed), this.force.x = t, this.force.z = s, this.force.length()) {
		var i = Math.cos(.25 * -Math.PI),
			o = Math.sin(.25 * -Math.PI);
		this.force.set(this.force.x * i - this.force.z * o, 0, this.force.z * i + this.force.x * o), this.force.length() > this.speed && this.force.normalize().scale(this.speed)
	}
	this.entity.rigidbody.applyImpulse(this.force)
};
var Teleportable = pc.createScript("teleportable");
Teleportable.prototype.initialize = function() {
	this.lastTeleportFrom = null, this.lastTeleportTo = null, this.lastTeleport = Date.now(), this.startPosition = this.entity.getPosition().clone()
}, Teleportable.prototype.update = function(t) {
	this.entity.getPosition().y < 0 && this.teleport(this.lastTeleportFrom, this.lastTeleportTo)
}, Teleportable.prototype.teleport = function(t, e) {
	var o;
	t && Date.now() - this.lastTeleport < 500 || (this.lastTeleport = Date.now(), this.lastTeleportFrom = t, this.lastTeleportTo = e, e ? (o = e.getPosition()).y += .5 : o = this.startPosition, this.entity.rigidbody.teleport(o), this.entity.rigidbody.linearVelocity = pc.Vec3.ZERO, this.entity.rigidbody.angularVelocity = pc.Vec3.ZERO)
};
var Teleport = pc.createScript("teleport");
Teleport.attributes.add("target", {
	type: "entity",
	title: "Target Entity",
	description: "The target entity where we are going to teleport"
}), Teleport.prototype.initialize = function() {
	this.target && this.entity.collision.on("triggerenter", this.onTriggerEnter, this)
}, Teleport.prototype.onTriggerEnter = function(t) {
	t.script.teleportable && t.script.teleportable.teleport(this.entity, this.target)
};
var TouchInput = pc.createScript("touchInput");
TouchInput.attributes.add("orbitSensitivity", {
	type: "number",
	default: .4,
	title: "Orbit Sensitivity",
	description: "How fast the camera moves around the orbit. Higher is faster"
}), TouchInput.attributes.add("distanceSensitivity", {
	type: "number",
	default: .2,
	title: "Distance Sensitivity",
	description: "How fast the camera moves in and out. Higher is faster"
}), TouchInput.prototype.initialize = function() {
	this.orbitCamera = this.entity.script.orbitCamera, this.lastTouchPoint = new pc.Vec2, this.lastPinchMidPoint = new pc.Vec2, this.lastPinchDistance = 0, this.orbitCamera && this.app.touch && (this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStartEndCancel, this), this.app.touch.on(pc.EVENT_TOUCHEND, this.onTouchStartEndCancel, this), this.app.touch.on(pc.EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this), this.app.touch.on(pc.EVENT_TOUCHMOVE, this.onTouchMove, this), this.on("destroy", (function() {
		this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStartEndCancel, this), this.app.touch.off(pc.EVENT_TOUCHEND, this.onTouchStartEndCancel, this), this.app.touch.off(pc.EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this), this.app.touch.off(pc.EVENT_TOUCHMOVE, this.onTouchMove, this)
	})))
}, TouchInput.prototype.getPinchDistance = function(t, i) {
	var o = t.x - i.x,
		n = t.y - i.y;
	return Math.sqrt(o * o + n * n)
}, TouchInput.prototype.calcMidPoint = function(t, i, o) {
	o.set(i.x - t.x, i.y - t.y), o.scale(.5), o.x += t.x, o.y += t.y
}, TouchInput.prototype.onTouchStartEndCancel = function(t) {
	var i = t.touches;
	1 == i.length ? this.lastTouchPoint.set(i[0].x, i[0].y) : 2 == i.length && (this.lastPinchDistance = this.getPinchDistance(i[0], i[1]), this.calcMidPoint(i[0], i[1], this.lastPinchMidPoint))
}, TouchInput.fromWorldPoint = new pc.Vec3, TouchInput.toWorldPoint = new pc.Vec3, TouchInput.worldDiff = new pc.Vec3, TouchInput.prototype.pan = function(t) {
	var i = TouchInput.fromWorldPoint,
		o = TouchInput.toWorldPoint,
		n = TouchInput.worldDiff,
		h = this.entity.camera,
		c = this.orbitCamera.distance;
	h.screenToWorld(t.x, t.y, c, i), h.screenToWorld(this.lastPinchMidPoint.x, this.lastPinchMidPoint.y, c, o), n.sub2(o, i), this.orbitCamera.pivotPoint.add(n)
}, TouchInput.pinchMidPoint = new pc.Vec2, TouchInput.prototype.onTouchMove = function(t) {
	TouchInput.pinchMidPoint;
	var i = t.touches;
	if(1 == i.length) {
		var o = i[0];
		this.orbitCamera.pitch -= (o.y - this.lastTouchPoint.y) * this.orbitSensitivity, this.orbitCamera.yaw -= (o.x - this.lastTouchPoint.x) * this.orbitSensitivity, this.lastTouchPoint.set(o.x, o.y)
	} else if(2 == i.length) {
		var n = this.getPinchDistance(i[0], i[1]),
			h = n - this.lastPinchDistance;
		this.lastPinchDistance = n, this.orbitCamera.distance -= h * this.distanceSensitivity * .1 * (.1 * this.orbitCamera.distance)
	}
};
var KeyboardInput = pc.createScript("keyboardInput");
KeyboardInput.prototype.initialize = function() {
	this.orbitCamera = this.entity.script.orbitCamera
}, KeyboardInput.prototype.postInitialize = function() {
	this.orbitCamera && (this.startDistance = this.orbitCamera.distance, this.startYaw = this.orbitCamera.yaw, this.startPitch = this.orbitCamera.pitch, this.startPivotPosition = this.orbitCamera.pivotPoint.clone())
}, KeyboardInput.prototype.update = function(t) {
	this.orbitCamera && this.app.keyboard.wasPressed(pc.KEY_SPACE) && (this.orbitCamera.reset(this.startYaw, this.startPitch, this.startDistance), this.orbitCamera.pivotPoint = this.startPivotPosition)
};
var LookCamera = pc.createScript("lookCamera");
LookCamera.attributes.add("mouseLookSensitivity", {
	type: "number",
	default: 0,
	title: "Mouse Look Sensitivity"
}), LookCamera.attributes.add("touchLookSensitivity", {
	type: "number",
	default: 0,
	title: "Touch Look Sensitivity"
}), LookCamera.attributes.add("snappinessFactor", {
	type: "number",
	default: .1,
	title: "Snappiness Factor",
	description: "Lower is faster"
}), LookCamera.attributes.add("pitchAngleMax", {
	type: "number",
	default: 90,
	title: "Pitch Angle Max (degrees)"
}), LookCamera.attributes.add("pitchAngleMin", {
	type: "number",
	default: 10,
	title: "Pitch Angle Min (degrees)"
}), LookCamera.prototype.initialize = function() {
	this._tempQuat1 = new pc.Quat, this._tempQuat2 = new pc.Quat, this._tempVec3_1 = new pc.Vec3;
	var t = this.entity.getLocalRotation();
	this.ey = this.getYaw(t) * pc.math.RAD_TO_DEG, this.ex = this.getPitch(t, this.ey) * pc.math.RAD_TO_DEG, this.targetEx = this.ex, this.targetEy = this.ey, this.moved = !1, this.app.mouse.disableContextMenu(), this.lastTouchPosition = new pc.Vec2, this.addEventCallbacks(), this.on("destroy", (function() {
		this.removeEventCallbacks()
	}), this)
}, LookCamera.prototype.addEventCallbacks = function() {
	this.app.mouse && this.app.mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this), this.app.touch && (this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.app.touch.on(pc.EVENT_TOUCHMOVE, this.onTouchMove, this))
}, LookCamera.prototype.removeEventCallbacks = function() {
	this.app.mouse && this.app.mouse.off(pc.EVENT_MOUSEMOVE, this.onMouseMove, this), this.app.touch && (this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.app.touch.off(pc.EVENT_TOUCHMOVE, this.onTouchMove, this))
}, LookCamera.prototype.update = function(t) {
	var e = 1;
	this.snappinessFactor > 0 && (e = t / this.snappinessFactor), this.ex = pc.math.lerp(this.ex, this.targetEx, e), this.ey = pc.math.lerp(this.ey, this.targetEy, e), this.entity.setLocalEulerAngles(this.ex, this.ey, 0)
}, LookCamera.prototype.moveCamera = function(t, e, o) {
	this.moved ? (this.targetEx += e * o, this.targetEx = pc.math.clamp(this.targetEx, this.pitchAngleMin, this.pitchAngleMax), this.targetEy += t * o) : this.moved = !0
}, LookCamera.prototype.onMouseMove = function(t) {
	this.app.mouse.isPressed(pc.MOUSEBUTTON_LEFT) && this.moveCamera(t.dx, t.dy, this.mouseLookSensitivity)
}, LookCamera.prototype.onTouchStart = function(t) {
	var e = t.touches[0];
	this.lastTouchPosition.set(e.x, e.y)
}, LookCamera.prototype.onTouchMove = function(t) {
	var e = t.touches[0];
	this.moveCamera(e.x - this.lastTouchPosition.x, e.y - this.lastTouchPosition.y, this.touchLookSensitivity), this.lastTouchPosition.set(e.x, e.y)
}, LookCamera.prototype.getYaw = function() {
	var t = this.entity.forward.clone();
	return Math.atan2(-t.x, -t.z)
}, LookCamera.prototype.getPitch = function(t, e) {
	var o = this._tempQuat1,
		i = this._tempQuat2;
	i.setFromEulerAngles(0, -e, 0), o.mul2(i, t);
	var a = this._tempVec3_1;
	return o.transformVector(pc.Vec3.FORWARD, a), Math.atan2(a.y, -a.z)
};
var MouseInput = pc.createScript("mouseInput");
MouseInput.attributes.add("orbitSensitivity", {
	type: "number",
	default: .3,
	title: "Orbit Sensitivity",
	description: "How fast the camera moves around the orbit. Higher is faster"
}), MouseInput.attributes.add("distanceSensitivity", {
	type: "number",
	default: .15,
	title: "Distance Sensitivity",
	description: "How fast the camera moves in and out. Higher is faster"
}), MouseInput.prototype.initialize = function() {
	if(this.orbitCamera = this.entity.script.orbitCamera, this.orbitCamera) {
		var t = this,
			onMouseOut = function(o) {
				t.onMouseOut(o)
			};
		this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.mouse.on(pc.EVENT_MOUSEUP, this.onMouseUp, this), this.app.mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this), this.app.mouse.on(pc.EVENT_MOUSEWHEEL, this.onMouseWheel, this), window.addEventListener("mouseout", onMouseOut, !1), this.on("destroy", (function() {
			this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.mouse.off(pc.EVENT_MOUSEUP, this.onMouseUp, this), this.app.mouse.off(pc.EVENT_MOUSEMOVE, this.onMouseMove, this), this.app.mouse.off(pc.EVENT_MOUSEWHEEL, this.onMouseWheel, this), window.removeEventListener("mouseout", onMouseOut, !1)
		}))
	}
	this.app.mouse.disableContextMenu(), this.lookButtonDown = !1, this.panButtonDown = !1, this.lastPoint = new pc.Vec2
}, MouseInput.fromWorldPoint = new pc.Vec3, MouseInput.toWorldPoint = new pc.Vec3, MouseInput.worldDiff = new pc.Vec3, MouseInput.prototype.pan = function(t) {
	var o = MouseInput.fromWorldPoint,
		e = MouseInput.toWorldPoint,
		i = MouseInput.worldDiff,
		s = this.entity.camera,
		n = this.orbitCamera.distance;
	s.screenToWorld(t.x, t.y, n, o), s.screenToWorld(this.lastPoint.x, this.lastPoint.y, n, e), i.sub2(e, o), this.orbitCamera.pivotPoint.add(i)
}, MouseInput.prototype.onMouseDown = function(t) {
	switch(t.button) {
		case pc.MOUSEBUTTON_LEFT:
			this.lookButtonDown = !0;
		case pc.MOUSEBUTTON_MIDDLE:
		case pc.MOUSEBUTTON_RIGHT:
	}
}, MouseInput.prototype.onMouseUp = function(t) {
	switch(t.button) {
		case pc.MOUSEBUTTON_LEFT:
			this.lookButtonDown = !1;
		case pc.MOUSEBUTTON_MIDDLE:
		case pc.MOUSEBUTTON_RIGHT:
	}
}, MouseInput.prototype.onMouseMove = function(t) {
	pc.app.mouse;
	this.lookButtonDown ? (this.orbitCamera.pitch -= t.dy * this.orbitSensitivity, this.orbitCamera.yaw -= t.dx * this.orbitSensitivity) : this.panButtonDown && this.pan(t), this.lastPoint.set(t.x, t.y)
}, MouseInput.prototype.onMouseWheel = function(t) {
//	this.orbitCamera.distance -= t.wheel * this.distanceSensitivity * (.1 * this.orbitCamera.distance), t.event.preventDefault()
}, MouseInput.prototype.onMouseOut = function(t) {
	this.lookButtonDown = !1, this.panButtonDown = !1
};
var OrbitCamera = pc.createScript("orbitCamera");
OrbitCamera.attributes.add("autoRender", {
	type: "boolean",
	default: !0,
	title: "Auto Render",
	description: "Disable to only render when camera is moving (saves power when the camera is still)"
}), OrbitCamera.attributes.add("fovMax", {
	type: "number",
	default: 40,
	title: "Fov Max"
}), OrbitCamera.attributes.add("fovMin", {
	type: "number",
	default: 20,
	title: "Fov Min"
}), OrbitCamera.attributes.add("distanceMax", {
	type: "number",
	default: 100,
	title: "Distance Max",
	description: "Setting this at 0 will give an infinite distance limit"
}), OrbitCamera.attributes.add("distanceMin", {
	type: "number",
	default: 100,
	title: "Distance Min"
}), OrbitCamera.attributes.add("pitchAngleMax", {
	type: "number",
	default: 90,
	title: "Pitch Angle Max (degrees)"
}), OrbitCamera.attributes.add("pitchAngleMin", {
	type: "number",
	default: 10,
	title: "Pitch Angle Min (degrees)"
}), OrbitCamera.attributes.add("inertiaFactor", {
	type: "number",
	default: .1,
	title: "Inertia Factor",
	description: "Higher value means that the camera will continue moving after the user has stopped dragging. 0 is fully responsive."
}), OrbitCamera.attributes.add("focusEntity", {
	type: "entity",
	title: "Focus Entity",
	description: "Entity for the camera to focus on. If blank, then the camera will use the whole scene"
}), OrbitCamera.attributes.add("frameOnStart", {
	type: "boolean",
	default: !0,
	title: "Frame on Start",
	description: 'Frames the entity or scene at the start of the application."'
}), OrbitCamera.attributes.add("autoRotateCD", {
	type: "number",
	default: 3,
	title: "Auto Rotate Cooling Down"
}), Object.defineProperty(OrbitCamera.prototype, "distance", {
	get: function() {
		return this._targetDistance
	},
	set: function(t) {
		this._targetDistance = this._clampDistance(t)
	}
}), Object.defineProperty(OrbitCamera.prototype, "fov", {
	get: function() {
		return this._targetFov
	},
	set: function(t) {
		this._targetFov = this._clampFov(t)
	}
}), Object.defineProperty(OrbitCamera.prototype, "pitch", {
	get: function() {
		return this._targetPitch
	},
	set: function(t) {
		this._targetPitch = this._clampPitchAngle(t)
	}
}), Object.defineProperty(OrbitCamera.prototype, "yaw", {
	get: function() {
		return this._targetYaw
	},
	set: function(t) {
		this._targetYaw = t;
		var i = (this._targetYaw - this._yaw) % 360;
		this._targetYaw = i > 180 ? this._yaw - (360 - i) : i < -180 ? this._yaw + (360 + i) : this._yaw + i
	}
}), Object.defineProperty(OrbitCamera.prototype, "pivotPoint", {
	get: function() {
		return this._pivotPoint
	},
	set: function(t) {
		this._pivotPoint.copy(t)
	}
}), OrbitCamera.prototype.focus = function(t) {
	this._buildAabb(t, 0);
	var i = this._modelsAabb.halfExtents,
		e = Math.max(i.x, Math.max(i.y, i.z));
	e /= Math.tan(.5 * this.entity.camera.fov * pc.math.DEG_TO_RAD), e *= 2, this.distance = e, this.fov = this.entity.camera.fov, this._removeInertia(), this._pivotPoint.copy(this._modelsAabb.center)
}, OrbitCamera.distanceBetween = new pc.Vec3, OrbitCamera.prototype.resetAndLookAtPoint = function(t, i) {
	this.pivotPoint.copy(i), this.entity.setPosition(t), this.entity.lookAt(i);
	var e = OrbitCamera.distanceBetween;
	e.sub2(i, t), this.distance = e.length(), this.pivotPoint.copy(i);
	var a = this.entity.getRotation();
	this.yaw = this._calcYaw(a), this.pitch = this._calcPitch(a, this.yaw), this._removeInertia(), this._updatePosition(), this.autoRender || (this.app.renderNextFrame = !0)
}, OrbitCamera.prototype.resetAndLookAtEntity = function(t, i) {
	this._buildAabb(i, 0), this.resetAndLookAtPoint(t, this._modelsAabb.center)
}, OrbitCamera.prototype.reset = function(t, i, e) {
	this.pitch = i, this.yaw = t, this.distance = e, this._removeInertia(), this.autoRender || (this.app.renderNextFrame = !0)
}, OrbitCamera.prototype.initialize = function() {
	this._checkAspectRatio(), this._modelsAabb = new pc.BoundingBox, this._buildAabb(this.focusEntity || this.app.root, 0), this.entity.lookAt(this._modelsAabb.center), this._pivotPoint = new pc.Vec3, this._pivotPoint.copy(this._modelsAabb.center);
	var t = this.entity.getRotation();
	if(this._yaw = this._calcYaw(t), this._pitch = this._clampPitchAngle(this._calcPitch(t, this._yaw)), this.entity.setLocalEulerAngles(this._pitch, this._yaw, 0), this._distance = 0, this._targetYaw = this._yaw, this._targetPitch = this._pitch, this.frameOnStart) this.focus(this.focusEntity || this.app.root);
	else {
		var i = new pc.Vec3;
		i.sub2(this.entity.getPosition(), this._pivotPoint), this._distance = this._clampDistance(i.length())
	}
	this._fov = this.entity.camera.fov, this._targetFov = this._fov, this._targetDistance = this._distance, this._autoRenderDefault = this.app.autoRender, this.app.autoRender && (this.app.autoRender = this.autoRender), this.autoRender || (this.app.renderNextFrame = !0), this.on("attr:autoRender", (function(t, i) {
		this.app.autoRender = t, this.autoRender || (this.app.renderNextFrame = !0)
	}), this), this.on("attr:distanceMin", (function(t, i) {
		this._targetDistance = this._clampDistance(this._distance)
	}), this), this.on("attr:distanceMax", (function(t, i) {
		this._targetDistance = this._clampDistance(this._distance)
	}), this), this.on("attr:fovMin", (function(t, i) {
		this._targetFov = this._clampDistance(this._fov)
	}), this), this.on("attr:fovMax", (function(t, i) {
		this._targetFov = this._clampDistance(this._fov)
	}), this), this.on("attr:pitchAngleMin", (function(t, i) {
		this._targetPitch = this._clampPitchAngle(this._pitch)
	}), this), this.on("attr:pitchAngleMax", (function(t, i) {
		this._targetPitch = this._clampPitchAngle(this._pitch)
	}), this), this.on("attr:focusEntity", (function(t, i) {
		this.frameOnStart ? this.focus(t || this.app.root) : this.resetAndLookAtEntity(this.entity.getPosition(), t || this.app.root)
	}), this), this.on("attr:frameOnStart", (function(t, i) {
		t && this.focus(this.focusEntity || this.app.root)
	}), this);
	var onResizeCanvas = function() {
		this._checkAspectRatio(), this.autoRender || (this.app.renderNextFrame = !0)
	};
	this.app.graphicsDevice.on("resizecanvas", onResizeCanvas, this), this.on("destroy", (function() {
		this.app.graphicsDevice.off("resizecanvas", onResizeCanvas, this)
	}), this), this.time = 0, this.isTouch = !1, this.app.touch && (this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.app.touch.on(pc.EVENT_TOUCHEND, this.onTouchEnd, this), this.on("destroy", (function() {
		this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.app.touch.off(pc.EVENT_TOUCHEND, this.onTouchEnd, this)
	}))), this.startYaw = this.yaw, this.startPitch = this.pitch, this.startDistance = this.distance, this.startFov = this.fov, this.app.off("resetOrbitCamera"), this.app.on("resetOrbitCamera", this.resetOrbitCamera, this)
}, OrbitCamera.prototype.resetOrbitCamera = function() {
	this.tYaw = 0;
	var t = (this._yaw - this.startYaw) % 360;
	this.tYaw = t > 180 ? this.startYaw - (360 - t) : t < -180 ? this.startYaw + (360 + t) : this.startYaw + t;
	var i = {
		y: this.tYaw,
		p: this._pitch,
		d: this._distance,
		f: this._fov
	};
	this.app.tween(i).to({
		y: this.startYaw,
		p: this.startPitch,
		d: this.startDistance,
		f: this.startFov
	}, .5, pc.SineOut).on("update", (() => {
		this.yaw = i.y, this.pitch = i.p, this.distance = i.d, this.fov = i.f
	})).start()
}, OrbitCamera.prototype.update = function(t) {
	if(!this.autoRender) {
		var i = Math.abs(this._targetDistance - this._distance),
			e = Math.abs(this._targetFov - this._fov),
			a = Math.abs(this._targetYaw - this._yaw),
			s = Math.abs(this._targetPitch - this._pitch);
		this.app.renderNextFrame = this.app.renderNextFrame || i > .01 || e > .01 || a > .01 || s > .01
	}
	var h = 0 === this.inertiaFactor ? 1 : Math.min(t / this.inertiaFactor, 1);
	this._distance = pc.math.lerp(this._distance, this._targetDistance, h), this._yaw = pc.math.lerp(this._yaw, this._targetYaw, h), this._pitch = pc.math.lerp(this._pitch, this._targetPitch, h), this._fov = pc.math.lerp(this._fov, this._targetFov, h), this._updatePosition()
}, OrbitCamera.prototype.onTouchStart = function() {
	this.isTouch = !0
}, OrbitCamera.prototype.onTouchEnd = function() {
	this.isTouch = !1
}, OrbitCamera.prototype._updatePosition = function() {
	this.entity.setLocalPosition(0, 0, 0), this.entity.setLocalEulerAngles(this._pitch, this._yaw, 0);
	var t = this.entity.getPosition();
	t.copy(this.entity.forward), t.scale(-this._distance), t.add(this.pivotPoint), this.entity.setPosition(t), this.entity.camera.fov = this._fov
}, OrbitCamera.prototype._removeInertia = function() {
	this._yaw = this._targetYaw, this._pitch = this._targetPitch, this._distance = this._targetDistance, this._fov = this._targetFov
}, OrbitCamera.prototype._checkAspectRatio = function() {
	var t = this.app.graphicsDevice.height,
		i = this.app.graphicsDevice.width;
	this.entity.camera.horizontalFov = t > i
}, OrbitCamera.prototype._buildAabb = function(t, i) {
	var e, a = 0,
		s = 0;
	if(t instanceof pc.Entity) {
		var h = [],
			r = t.findComponents("render");
		for(a = 0; a < r.length; ++a)
			if(e = r[a].meshInstances)
				for(s = 0; s < e.length; s++) h.push(e[s]);
		var n = t.findComponents("model");
		for(a = 0; a < n.length; ++a)
			if(e = n[a].meshInstances)
				for(s = 0; s < e.length; s++) h.push(e[s]);
		for(a = 0; a < h.length; a++) 0 === i ? this._modelsAabb.copy(h[a].aabb) : this._modelsAabb.add(h[a].aabb), i += 1
	}
	for(a = 0; a < t.children.length; ++a) i += this._buildAabb(t.children[a], i);
	return i
}, OrbitCamera.prototype._calcYaw = function(t) {
	var i = new pc.Vec3;
	return t.transformVector(pc.Vec3.FORWARD, i), Math.atan2(-i.x, -i.z) * pc.math.RAD_TO_DEG
}, OrbitCamera.prototype._clampDistance = function(t) {
	return this.distanceMax > 0 ? pc.math.clamp(t, this.distanceMin, this.distanceMax) : Math.max(t, this.distanceMin)
}, OrbitCamera.prototype._clampFov = function(t) {
	return this.fovMax > 0 ? pc.math.clamp(t, this.fovMin, this.fovMax) : Math.max(t, this.fovMin)
}, OrbitCamera.prototype._clampPitchAngle = function(t) {
	return pc.math.clamp(t, -this.pitchAngleMax, -this.pitchAngleMin)
}, OrbitCamera.quatWithoutYaw = new pc.Quat, OrbitCamera.yawOffset = new pc.Quat, OrbitCamera.prototype._calcPitch = function(t, i) {
	var e = OrbitCamera.quatWithoutYaw,
		a = OrbitCamera.yawOffset;
	a.setFromEulerAngles(0, -i, 0), e.mul2(a, t);
	var s = new pc.Vec3;
	return e.transformVector(pc.Vec3.FORWARD, s), Math.atan2(s.y, -s.z) * pc.math.RAD_TO_DEG
};
pc.extend(pc, function() {
		var TweenManager = function(t) {
			this._app = t, this._tweens = [], this._add = []
		};
		TweenManager.prototype = {
			add: function(t) {
				return this._add.push(t), t
			},
			update: function(t) {
				for(var i = 0, e = this._tweens.length; i < e;) this._tweens[i].update(t) ? i++ : (this._tweens.splice(i, 1), e--);
				if(this._add.length) {
					for(let t = 0; t < this._add.length; t++) this._tweens.indexOf(this._add[t]) > -1 || this._tweens.push(this._add[t]);
					this._add.length = 0
				}
			}
		};
		var Tween = function(t, i, e) {
				pc.events.attach(this), this.manager = i, e && (this.entity = null), this.time = 0, this.complete = !1, this.playing = !1, this.stopped = !0, this.pending = !1, this.target = t, this.duration = 0, this._currentDelay = 0, this.timeScale = 1, this._reverse = !1, this._delay = 0, this._yoyo = !1, this._count = 0, this._numRepeats = 0, this._repeatDelay = 0, this._from = !1, this._slerp = !1, this._fromQuat = new pc.Quat, this._toQuat = new pc.Quat, this._quat = new pc.Quat, this.easing = pc.Linear, this._sv = {}, this._ev = {}
			},
			_parseProperties = function(t) {
				var i;
				return t instanceof pc.Vec2 ? i = {
					x: t.x,
					y: t.y
				} : t instanceof pc.Vec3 ? i = {
					x: t.x,
					y: t.y,
					z: t.z
				} : t instanceof pc.Vec4 || t instanceof pc.Quat ? i = {
					x: t.x,
					y: t.y,
					z: t.z,
					w: t.w
				} : t instanceof pc.Color ? (i = {
					r: t.r,
					g: t.g,
					b: t.b
				}, void 0 !== t.a && (i.a = t.a)) : i = t, i
			};
		Tween.prototype = {
			to: function(t, i, e, s, n, r) {
				return this._properties = _parseProperties(t), this.duration = i, e && (this.easing = e), s && this.delay(s), n && this.repeat(n), r && this.yoyo(r), this
			},
			from: function(t, i, e, s, n, r) {
				return this._properties = _parseProperties(t), this.duration = i, e && (this.easing = e), s && this.delay(s), n && this.repeat(n), r && this.yoyo(r), this._from = !0, this
			},
			rotate: function(t, i, e, s, n, r) {
				return this._properties = _parseProperties(t), this.duration = i, e && (this.easing = e), s && this.delay(s), n && this.repeat(n), r && this.yoyo(r), this._slerp = !0, this
			},
			start: function() {
				var t, i, e, s;
				if(this.playing = !0, this.complete = !1, this.stopped = !1, this._count = 0, this.pending = this._delay > 0, this._reverse && !this.pending ? this.time = this.duration : this.time = 0, this._from) {
					for(t in this._properties) this._properties.hasOwnProperty(t) && (this._sv[t] = this._properties[t], this._ev[t] = this.target[t]);
					this._slerp && (this._toQuat.setFromEulerAngles(this.target.x, this.target.y, this.target.z), i = void 0 !== this._properties.x ? this._properties.x : this.target.x, e = void 0 !== this._properties.y ? this._properties.y : this.target.y, s = void 0 !== this._properties.z ? this._properties.z : this.target.z, this._fromQuat.setFromEulerAngles(i, e, s))
				} else {
					for(t in this._properties) this._properties.hasOwnProperty(t) && (this._sv[t] = this.target[t], this._ev[t] = this._properties[t]);
					this._slerp && (i = void 0 !== this._properties.x ? this._properties.x : this.target.x, e = void 0 !== this._properties.y ? this._properties.y : this.target.y, s = void 0 !== this._properties.z ? this._properties.z : this.target.z, void 0 !== this._properties.w ? (this._fromQuat.copy(this.target), this._toQuat.set(i, e, s, this._properties.w)) : (this._fromQuat.setFromEulerAngles(this.target.x, this.target.y, this.target.z), this._toQuat.setFromEulerAngles(i, e, s)))
				}
				return this._currentDelay = this._delay, this.manager.add(this), this
			},
			pause: function() {
				this.playing = !1
			},
			resume: function() {
				this.playing = !0
			},
			stop: function() {
				this.playing = !1, this.stopped = !0
			},
			delay: function(t) {
				return this._delay = t, this.pending = !0, this
			},
			repeat: function(t, i) {
				return this._count = 0, this._numRepeats = t, this._repeatDelay = i || 0, this
			},
			loop: function(t) {
				return t ? (this._count = 0, this._numRepeats = 1 / 0) : this._numRepeats = 0, this
			},
			yoyo: function(t) {
				return this._yoyo = t, this
			},
			reverse: function() {
				return this._reverse = !this._reverse, this
			},
			chain: function() {
				for(var t = arguments.length; t--;) t > 0 ? arguments[t - 1]._chained = arguments[t] : this._chained = arguments[t];
				return this
			},
			update: function(t) {
				if(this.stopped) return !1;
				if(!this.playing) return !0;
				if(!this._reverse || this.pending ? this.time += t * this.timeScale : this.time -= t * this.timeScale, this.pending) {
					if(!(this.time > this._currentDelay)) return !0;
					this._reverse ? this.time = this.duration - (this.time - this._currentDelay) : this.time -= this._currentDelay, this.pending = !1
				}
				var i = 0;
				(!this._reverse && this.time > this.duration || this._reverse && this.time < 0) && (this._count++, this.complete = !0, this.playing = !1, this._reverse ? (i = this.duration - this.time, this.time = 0) : (i = this.time - this.duration, this.time = this.duration));
				var e, s, n = 0 === this.duration ? 1 : this.time / this.duration,
					r = this.easing(n);
				for(var h in this._properties) this._properties.hasOwnProperty(h) && (e = this._sv[h], s = this._ev[h], this.target[h] = e + (s - e) * r);
				if(this._slerp && this._quat.slerp(this._fromQuat, this._toQuat, r), this.entity && (this.entity._dirtifyLocal(), this.element && this.entity.element && (this.entity.element[this.element] = this.target), this._slerp && this.entity.setLocalRotation(this._quat)), this.fire("update", t), this.complete) {
					var a = this._repeat(i);
					return a ? this.fire("loop") : (this.fire("complete", i), this.entity && this.entity.off("destroy", this.stop, this), this._chained && this._chained.start()), a
				}
				return !0
			},
			_repeat: function(t) {
				if(this._count < this._numRepeats) {
					if(this._reverse ? this.time = this.duration - t : this.time = t, this.complete = !1, this.playing = !0, this._currentDelay = this._repeatDelay, this.pending = !0, this._yoyo) {
						for(var i in this._properties) {
							var e = this._sv[i];
							this._sv[i] = this._ev[i], this._ev[i] = e
						}
						this._slerp && (this._quat.copy(this._fromQuat), this._fromQuat.copy(this._toQuat), this._toQuat.copy(this._quat))
					}
					return !0
				}
				return !1
			}
		};
		var BounceOut = function(t) {
				return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
			},
			BounceIn = function(t) {
				return 1 - BounceOut(1 - t)
			};
		return {
			TweenManager: TweenManager,
			Tween: Tween,
			Linear: function(t) {
				return t
			},
			QuadraticIn: function(t) {
				return t * t
			},
			QuadraticOut: function(t) {
				return t * (2 - t)
			},
			QuadraticInOut: function(t) {
				return(t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1)
			},
			CubicIn: function(t) {
				return t * t * t
			},
			CubicOut: function(t) {
				return --t * t * t + 1
			},
			CubicInOut: function(t) {
				return(t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2)
			},
			QuarticIn: function(t) {
				return t * t * t * t
			},
			QuarticOut: function(t) {
				return 1 - --t * t * t * t
			},
			QuarticInOut: function(t) {
				return(t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2)
			},
			QuinticIn: function(t) {
				return t * t * t * t * t
			},
			QuinticOut: function(t) {
				return --t * t * t * t * t + 1
			},
			QuinticInOut: function(t) {
				return(t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2)
			},
			SineIn: function(t) {
				return 0 === t ? 0 : 1 === t ? 1 : 1 - Math.cos(t * Math.PI / 2)
			},
			SineOut: function(t) {
				return 0 === t ? 0 : 1 === t ? 1 : Math.sin(t * Math.PI / 2)
			},
			SineInOut: function(t) {
				return 0 === t ? 0 : 1 === t ? 1 : .5 * (1 - Math.cos(Math.PI * t))
			},
			ExponentialIn: function(t) {
				return 0 === t ? 0 : Math.pow(1024, t - 1)
			},
			ExponentialOut: function(t) {
				return 1 === t ? 1 : 1 - Math.pow(2, -10 * t)
			},
			ExponentialInOut: function(t) {
				return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
			},
			CircularIn: function(t) {
				return 1 - Math.sqrt(1 - t * t)
			},
			CircularOut: function(t) {
				return Math.sqrt(1 - --t * t)
			},
			CircularInOut: function(t) {
				return(t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
			},
			BackIn: function(t) {
				var i = 1.70158;
				return t * t * ((i + 1) * t - i)
			},
			BackOut: function(t) {
				var i = 1.70158;
				return --t * t * ((i + 1) * t + i) + 1
			},
			BackInOut: function(t) {
				var i = 2.5949095;
				return(t *= 2) < 1 ? t * t * ((i + 1) * t - i) * .5 : .5 * ((t -= 2) * t * ((i + 1) * t + i) + 2)
			},
			BounceIn: BounceIn,
			BounceOut: BounceOut,
			BounceInOut: function(t) {
				return t < .5 ? .5 * BounceIn(2 * t) : .5 * BounceOut(2 * t - 1) + .5
			},
			ElasticIn: function(t) {
				var i, e = .1;
				return 0 === t ? 0 : 1 === t ? 1 : (!e || e < 1 ? (e = 1, i = .1) : i = .4 * Math.asin(1 / e) / (2 * Math.PI), -e * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / .4))
			},
			ElasticOut: function(t) {
				var i, e = .1;
				return 0 === t ? 0 : 1 === t ? 1 : (!e || e < 1 ? (e = 1, i = .1) : i = .4 * Math.asin(1 / e) / (2 * Math.PI), e * Math.pow(2, -10 * t) * Math.sin((t - i) * (2 * Math.PI) / .4) + 1)
			},
			ElasticInOut: function(t) {
				var i, e = .1,
					s = .4;
				return 0 === t ? 0 : 1 === t ? 1 : (!e || e < 1 ? (e = 1, i = .1) : i = s * Math.asin(1 / e) / (2 * Math.PI), (t *= 2) < 1 ? e * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / s) * -.5 : e * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / s) * .5 + 1)
			}
		}
	}()),
	function() {
		pc.Application.prototype.addTweenManager = function() {
			this._tweenManager = new pc.TweenManager(this), this.on("update", (function(t) {
				this._tweenManager.update(t)
			}))
		}, pc.Application.prototype.tween = function(t) {
			return new pc.Tween(t, this._tweenManager)
		}, pc.Entity.prototype.tween = function(t, i) {
			var e = this._app.tween(t);
			return e.entity = this, this.once("destroy", e.stop, e), i && i.element && (e.element = i.element), e
		};
		var t = pc.Application.getApplication();
		t && t.addTweenManager()
	}();
var ChangeScene = pc.createScript("changeScene");
ChangeScene.attributes.add("sceneName", {
	type: "string",
	default: "",
	title: "Scene Name"
}), ChangeScene.prototype.initialize = function() {
	var e = this;
	this.entity.button.on("click", (function(n) {
		e.doChangeScene(this.sceneName)
	}), this)
}, ChangeScene.prototype.update = function(e) {}, ChangeScene.prototype.doChangeScene = function(e) {
	void 0 !== this.app.scenes.find(e) && this.app.scenes.changeScene(e)
};
var CarColor = pc.createScript("carColor");
CarColor.attributes.add("targetModels", {
	type: "entity",
	title: "TargetModels",
	array: !0
}), CarColor.prototype.initialize = function() {
	this.meshInstances = [];
	for(var t = 0; t < this.targetModels.length; t++)
		for(var o = this.targetModels[t].findComponents("render"), r = 0; r < o.length; r++)
			for(var e = o[r].meshInstances, a = 0; a < e.length; a++) {
				"CarPaint" == e[a].material.name && this.meshInstances.push(e[a])
			}
	this.app.on("changeCarColor", this.changeCarColor, this), this.on("destroy", (function() {
		this.app.off("changeCarColor", this.changeCarColor, this)
	}), this)
}, CarColor.prototype.update = function(t) {}, CarColor.prototype.changeCarColor = function(t) {
	console.log("Change Color");
	for(var o = this.meshInstances, r = 0; r < o.length; r++) console.log(t), o[r].setParameter("material_diffuse", [t.r, t.g, t.b])
};
var ChangeColor = pc.createScript("changeColor");
ChangeColor.attributes.add("_diffuseColor", {
	type: "rgb",
	title: "DiffuseColor"
}), ChangeColor.prototype.initialize = function() {
	this.diffuseColor = this._diffuseColor, this.entity.button.on("click", this.changeCarColor, this)
}, ChangeColor.prototype.update = function(o) {}, ChangeColor.prototype.changeCarColor = function() {
	this.app.fire("changeCarColor", this.diffuseColor)
};
var CarHotSpot = pc.createScript("carHotSpot");
CarHotSpot.attributes.add("leftFrontDoorEntity", {
	type: "entity",
	title: "LeftFrontDoorEntity"
}), CarHotSpot.attributes.add("leftBackDoorEntity", {
	type: "entity",
	title: "LeftBackDoorEntity"
}), CarHotSpot.attributes.add("rightFrontDoorEntity", {
	type: "entity",
	title: "RightFrontDoorEntity"
}), CarHotSpot.attributes.add("rightBackDoorEntity", {
	type: "entity",
	title: "RightBackDoorEntity"
}), CarHotSpot.attributes.add("backDoorEntity", {
	type: "entity",
	title: "BackDoorEntity"
}), CarHotSpot.attributes.add("roofEntity", {
	type: "entity",
	title: "RoofEntity"
}), CarHotSpot.prototype.initialize = function() {
	this.app.on("carOpenDoor", this.carOpenDoor, this), this.app.on("carResetDoor", this.carResetDoor, this), this.on("destroy", (function() {
		this.app.off("carOpenDoor", this.carOpenDoor, this), this.app.off("carResetDoor", this.carResetDoor, this)
	}), this)
}, CarHotSpot.prototype.carOpenDoor = function(t) {
	if(void 0 !== this.leftFrontDoorEntity.anim) switch(console.log("carOpenDoor " + t), t) {
		case 0:
			this.leftFrontDoorEntity.anim.setBoolean("IsOpen", !this.leftFrontDoorEntity.anim.getBoolean("IsOpen"));
			break;
		case 1:
			this.leftBackDoorEntity.anim.setBoolean("IsOpen", !this.leftBackDoorEntity.anim.getBoolean("IsOpen"));
			break;
		case 2:
			this.rightFrontDoorEntity.anim.setBoolean("IsOpen", !this.rightFrontDoorEntity.anim.getBoolean("IsOpen"));
			break;
		case 3:
			this.rightBackDoorEntity.anim.setBoolean("IsOpen", !this.rightBackDoorEntity.anim.getBoolean("IsOpen"));
			break;
		case 4:
			this.backDoorEntity.anim.setBoolean("IsOpen", !this.backDoorEntity.anim.getBoolean("IsOpen"));
			break;
		case 5:
			this.roofEntity.anim.setBoolean("IsOpen", !this.roofEntity.anim.getBoolean("IsOpen"))
	}
}, CarHotSpot.prototype.carResetDoor = function() {
	void 0 !== this.leftFrontDoorEntity.anim && (this.leftFrontDoorEntity.anim.getBoolean("IsOpen") && this.leftFrontDoorEntity.anim.setBoolean("IsOpen", !1), this.leftBackDoorEntity.anim.getBoolean("IsOpen") && this.leftBackDoorEntity.anim.setBoolean("IsOpen", !1), this.rightFrontDoorEntity.anim.getBoolean("IsOpen") && this.rightFrontDoorEntity.anim.setBoolean("IsOpen", !1), this.rightBackDoorEntity.anim.getBoolean("IsOpen") && this.rightBackDoorEntity.anim.setBoolean("IsOpen", !1), this.backDoorEntity.anim.getBoolean("IsOpen") && this.backDoorEntity.anim.setBoolean("IsOpen", !1), this.roofEntity.anim.getBoolean("IsOpen") && this.roofEntity.anim.setBoolean("IsOpen", !1))
}, CarHotSpot.prototype.allDoorOpen = function(t) {
	void 0 !== this.leftFrontDoorEntity.anim && (t ? (this.leftFrontDoorEntity.anim.getBoolean("IsOpen") || this.leftFrontDoorEntity.anim.setBoolean("IsOpen", !0), this.leftBackDoorEntity.anim.getBoolean("IsOpen") || this.leftBackDoorEntity.anim.setBoolean("IsOpen", !0), this.rightFrontDoorEntity.anim.getBoolean("IsOpen") || this.rightFrontDoorEntity.anim.setBoolean("IsOpen", !0), this.rightBackDoorEntity.anim.getBoolean("IsOpen") || this.rightBackDoorEntity.anim.setBoolean("IsOpen", !0), this.backDoorEntity.anim.getBoolean("IsOpen") || this.backDoorEntity.anim.setBoolean("IsOpen", !0), this.roofEntity.anim.getBoolean("IsOpen") || this.roofEntity.anim.setBoolean("IsOpen", !0)) : (this.leftFrontDoorEntity.anim.getBoolean("IsOpen") && this.leftFrontDoorEntity.anim.setBoolean("IsOpen", !1), this.leftBackDoorEntity.anim.getBoolean("IsOpen") && this.leftBackDoorEntity.anim.setBoolean("IsOpen", !1), this.rightFrontDoorEntity.anim.getBoolean("IsOpen") && this.rightFrontDoorEntity.anim.setBoolean("IsOpen", !1), this.rightBackDoorEntity.anim.getBoolean("IsOpen") && this.rightBackDoorEntity.anim.setBoolean("IsOpen", !1), this.backDoorEntity.anim.getBoolean("IsOpen") && this.backDoorEntity.anim.setBoolean("IsOpen", !1), this.roofEntity.anim.getBoolean("IsOpen") && this.roofEntity.anim.setBoolean("IsOpen", !1)))
};
var CarPaint = pc.createScript("carPaint");
CarPaint.attributes.add("lightMaterials", {
	type: "asset",
	assetType: "material",
	array: !0,
	title: "LightMaterials"
}), CarPaint.prototype.initialize = function() {
	this.meshInstances = [], this.lightMeshInstances = [];
	for(var t = this.entity.findComponents("render"), a = 0; a < t.length; a++)
		for(var i = t[a].meshInstances, e = 0; e < i.length; e++) {
			var n = i[e].material;
			0 == n.name.indexOf("CarPaint_") && this.meshInstances.push(i[e]), 0 == n.name.indexOf("deng_") && this.lightMeshInstances.push(i[e])
		}
	this.app.on("changeCarMaterial", this.changeCarMaterial, this), this.app.on("lightOn", this.lightOn, this), this.on("destroy", (function() {
		this.app.off("changeCarMaterial", this.changeCarMaterial, this), this.app.off("lightOn", this.lightOn, this)
	}), this)
}, CarPaint.prototype.update = function(t) {}, CarPaint.prototype.changeCarMaterial = function(t) {
	console.log(t.name);
	for(var a = this.meshInstances, i = 0; i < a.length; i++) {
		a[i].material = t.resource
	}
}, CarPaint.prototype.lightOn = function(t) {
	for(var a = t ? 1 : 0, i = this.lightMaterials[a], e = this.lightMeshInstances, n = 0; n < e.length; n++) {
		e[n].material = i.resource
	}
};
var ChangeCarPaint = pc.createScript("changeCarPaint");
ChangeCarPaint.attributes.add("material", {
	type: "asset",
	assetType: "material",
	array: !1,
	title: "Material"
}), ChangeCarPaint.attributes.add("selectedImage", {
	type: "asset",
	assetType: "texture",
	array: !1,
	title: "SelectedImage"
}), ChangeCarPaint.prototype.initialize = function() {
	this.entity.button.on("click", (function() {
		this.changeMaterail(i)
	}), this)
}, ChangeCarPaint.prototype.update = function(a) {}, ChangeCarPaint.prototype.changeMaterail = function(a) {
	console.log("changeMaterail" + a), this.app.fire("changeCarMaterial", this.material)
};
var HotSpot = pc.createScript("hotSpot");
HotSpot.attributes.add("cameraEntity", {
	type: "entity",
	title: "CameraEntity"
}), HotSpot.attributes.add("radius", {
	type: "number",
	title: "Radius"
}), HotSpot.attributes.add("fadeDropOff", {
	type: "number",
	default: .4,
	title: "Fade Drop Off",
	description: "When to start fading out hotspot relative to the camera direction. 1 for when hotspot is directly inline with the camera. 0 for never."
}), HotSpot.attributes.add("doorIndex", {
	type: "number",
	title: "DoorIndex"
}), HotSpot.prototype.initialize = function() {
	this.hitArea = new pc.BoundingSphere(this.entity.getPosition(), this.radius), this.ray = new pc.Ray, this.defaultForwardDirection = this.entity.forward.clone(), this.directionToCamera = new pc.Vec3, this.sprite = this.entity.children[0], this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.touch && this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.on("destroy", (function() {
		this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.touch && this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStart, this)
	}), this), this.isOpen = !1
}, HotSpot.prototype.update = function(t) {
	var i = this.cameraEntity.getPosition();
	this.entity.lookAt(i), this.directionToCamera.sub2(i, this.entity.getPosition()), this.directionToCamera.normalize()
}, HotSpot.prototype.doRayCast = function(t) {
	this.sprite.enabled && (this.cameraEntity.camera.screenToWorld(t.x, t.y, this.cameraEntity.camera.farClip, this.ray.direction), this.ray.origin.copy(this.cameraEntity.getPosition()), this.ray.direction.sub(this.ray.origin).normalize(), this.hitArea.intersectsRay(this.ray) && this.app.fire("carOpenDoor", this.doorIndex))
}, HotSpot.prototype.onMouseDown = function(t) {
	t.button == pc.MOUSEBUTTON_LEFT && this.doRayCast(t)
}, HotSpot.prototype.onTouchStart = function(t) {
	1 == t.touches.length && (this.doRayCast(t.touches[0]), t.event.preventDefault())
};
var ChooseScene = pc.createScript("chooseScene");
ChooseScene.attributes.add("sceneGrounds", {
	type: "entity",
	title: "Ground Entities",
	array: !0
}), ChooseScene.attributes.add("sceneSkys", {
	type: "entity",
	title: "Sky Entities",
	array: !0
}), ChooseScene.prototype.initialize = function() {
	this.app.on("chooseScene", this.chooseScene, this), this.on("destroy", (function() {
		this.app.off("chooseScene", this.chooseScene, this)
	}), this)
}, ChooseScene.prototype.update = function(e) {}, ChooseScene.prototype.chooseScene = function(e) {
	if(!(e < 0 || e >= this.sceneGrounds.length)) {
		this.groundEntity = this.sceneGrounds[e], this.skyEntity = this.sceneSkys[e];
		for(var t = 0; t < this.sceneGrounds.length; t++) this.sceneGrounds[t].enabled = t == e, this.sceneSkys[t].enabled = t == e
	}
}, ChooseScene.prototype.showGround = function(e) {
	void 0 !== this.groundEntity && (this.groundEntity.enabled = e)
};
var MainUi = pc.createScript("mainUi");
MainUi.attributes.add("exteriorEntity", {
	type: "entity",
	title: "ExteriorEntity"
}), MainUi.attributes.add("interiorEntity", {
	type: "entity",
	title: "InteriorEntity"
}), MainUi.attributes.add("exteriorRoot", {
	type: "entity",
	title: "ExteriorRootEntity"
}), MainUi.attributes.add("interiorRoot", {
	type: "entity",
	title: "InteriorRootEntity"
}), MainUi.attributes.add("carEntity", {
	type: "entity",
	title: "CarEntity"
}), MainUi.attributes.add("lightOnEntities", {
	type: "entity",
	array: !0,
	title: "LightOnEntities"
}), MainUi.attributes.add("skyEntities", {
	type: "entity",
	array: !0,
	title: "SkyEntities"
}), MainUi.attributes.add("skySphereEntities", {
	type: "entity",
	array: !0,
	title: "SkySphereEntities"
}), MainUi.attributes.add("skyLightOnMats", {
	type: "asset",
	assetType: "material",
	array: !0,
	title: "SkyLightOnMats"
}), MainUi.attributes.add("skyLightOffMats", {
	type: "asset",
	assetType: "material",
	array: !0,
	title: "SkyLightOffMats"
}), MainUi.attributes.add("groundEntities", {
	type: "entity",
	array: !0,
	title: "GroundEntities"
}), MainUi.attributes.add("soundButton", {
	type: "entity",
	title: "SoundButton"
}), MainUi.attributes.add("soundImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "SoundImages"
}), MainUi.attributes.add("soundEntity", {
	type: "entity",
	title: "SoundEntity"
}), MainUi.prototype.initialize = function() {
	this.soundButton.button.on("click", this.onMusicClick, this), this.app.on("switchScene", this.onSwitchScene, this), this.app.on("chooseScene", this.chooseScene, this), this.app.on("allDoorOpen", this.allDoorOpen, this), this.app.on("lightOn", this.lightOn, this), this.on("destroy", (function() {
		this.app.off("switchScene", this.onSwitchScene, this), this.app.off("chooseScene", this.chooseScene, this), this.app.off("allDoorOpen", this.allDoorOpen, this), this.app.off("lightOn", this.lightOn, this)
	}), this)
}, MainUi.prototype.update = function(t) {}, MainUi.prototype.sceneIndex = 0, MainUi.prototype.isMusicOn = !0, MainUi.prototype.onSwitchScene = function(t) {
	"interior" == t ? (this.interiorEntity.enabled = !0, this.interiorRoot.enabled = !0, this.exteriorEntity.enabled = !1, this.exteriorRoot.enabled = !1, this.groundEntities[this.sceneIndex].enabled = !1) : (this.interiorEntity.enabled = !1, this.interiorRoot.enabled = !1, this.exteriorEntity.enabled = !0, this.exteriorRoot.enabled = !0, this.groundEntities[this.sceneIndex].enabled = !0)
}, MainUi.prototype.chooseScene = function(t) {
	this.sceneIndex != t && (this.skyEntities[this.sceneIndex].enabled = !1, this.skyEntities[t].enabled = !0, this.sceneIndex = t)
}, MainUi.prototype.allDoorOpen = function(t) {
	this.carEntity.script.get("carHotSpot").allDoorOpen(t)
}, MainUi.prototype.lightOn = function(t) {
	for(var i = 0; i < this.lightOnEntities.length; i++) this.lightOnEntities[i].enabled = t;
	this.changeSkyMaterial(t)
}, MainUi.prototype.changeSkyMaterial = function(t) {
	var i = this.skySphereEntities[this.sceneIndex].findComponent("render");
	i.meshInstances[0].material = t ? this.skyLightOnMats[this.sceneIndex].resource : this.skyLightOffMats[this.sceneIndex].resource
}, MainUi.prototype.onMusicClick = function() {
	this.isMusicOn = !this.isMusicOn, this.musicOn(this.isMusicOn)
}, MainUi.prototype.musicOn = function(t) {
	var i = t ? 0 : 1;
	this.soundButton.element.textureAsset = this.soundImages[i], t ? this.soundEntity.sound.resume() : this.soundEntity.sound.pause()
};
var ExteriorUi = pc.createScript("exteriorUi");
ExteriorUi.attributes.add("commandButtons", {
	type: "entity",
	array: !0,
	title: "CommandButtons"
}), ExteriorUi.attributes.add("buttonOnImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOnImages"
}), ExteriorUi.attributes.add("buttonOffImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOffImages"
}), ExteriorUi.attributes.add("changeColorGroup", {
	type: "entity",
	title: "ChangeColorGroup"
}), ExteriorUi.attributes.add("chooseSceneUI", {
	type: "entity",
	title: "ChooseSceneUI"
}), ExteriorUi.prototype.initialize = function() {
	for(var t = 0; t < this.commandButtons.length; t++) this.commandButtons[t].commandIndex = t, this.commandButtons[t].button.on("click", this.commandClick, this)
}, ExteriorUi.prototype.commands = ["changeColor", "switchLight", "chooseScene", "allDoor", "switchScene"], ExteriorUi.prototype.lastCommand = -1, ExteriorUi.prototype.lightOn = !1, ExteriorUi.prototype.allDoorOpen = !1, ExteriorUi.prototype.update = function(t) {}, ExteriorUi.prototype.commandClick = function(t) {
	var e = t.element.entity.commandIndex;
	this.lastCommand >= 0 ? this.lastCommand != e ? (this.revertCommand(this.lastCommand), this.excuteCommand(e), this.lastCommand = e) : (this.revertCommand(e), this.lastCommand = -1) : (this.excuteCommand(e), this.lastCommand = e)
}, ExteriorUi.prototype.excuteCommand = function(t) {
	var e = this.commands[t];
	switch(e) {
		case "changeColor":
			this.changeColorGroup.enabled = !0;
			break;
		case "switchLight":
			this.lightOn = !0, this.app.fire("lightOn", this.lightOn);
			break;
		case "chooseScene":
			this.chooseSceneUI.enabled = !0;
			break;
		case "allDoor":
			this.allDoorOpen = !0, this.app.fire("allDoorOpen", this.allDoorOpen);
			break;
		case "switchScene":
			this.app.fire("switchScene", "interior")
	}
	"switchScene" != e && (this.commandButtons[t].element.textureAsset = this.buttonOnImages[t])
}, ExteriorUi.prototype.revertCommand = function(t) {
	var e = this.commands[t];
	switch(e) {
		case "changeColor":
			this.changeColorGroup.enabled = !1;
			break;
		case "switchLight":
			this.lightOn = !1, this.app.fire("lightOn", this.lightOn);
			break;
		case "chooseScene":
			this.chooseSceneUI.enabled = !1;
			break;
		case "allDoor":
			this.allDoorOpen = !1, this.app.fire("allDoorOpen", this.allDoorOpen)
	}
	"switchScene" != e && (this.commandButtons[t].element.textureAsset = this.buttonOffImages[t])
};
var InteriorUi = pc.createScript("interiorUi");
InteriorUi.attributes.add("atmoSphereLightButton", {
	type: "entity",
	title: "AtmoSphereLightButton"
}), InteriorUi.attributes.add("exteriorButton", {
	type: "entity",
	title: "ExteriorButton"
}), InteriorUi.attributes.add("panoCamera", {
	type: "entity",
	title: "PanoCamera"
}), InteriorUi.attributes.add("panoSperes", {
	type: "entity",
	array: !0,
	title: "PanoSpheres"
}), InteriorUi.attributes.add("panoSpots", {
	type: "entity",
	array: !0,
	title: "PanoSpots"
}), InteriorUi.attributes.add("buttonImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonImages"
}), InteriorUi.prototype.initialize = function() {
	this.atmoSphereLightButton.button.on("click", this.atmoSphereLightClick, this), this.exteriorButton.button.on("click", this.exteriorClick, this), this.app.on("changePanoSpot", this.changePanoSpot, this), this.on("destroy", (function() {
		this.app.off("changePanoSpot", this.changePanoSpot, this)
	}), this)
}, InteriorUi.prototype.update = function(t) {}, InteriorUi.prototype.x = .4, InteriorUi.prototype.isAtmoLightOn = !1, InteriorUi.prototype.currSpot = 0, InteriorUi.prototype.cameraRotation = new pc.Vec3(0, 90, 0), InteriorUi.prototype.atmoSphereLightClick = function(t) {
	this.isAtmoLightOn = !this.isAtmoLightOn;
	var i = this.isAtmoLightOn ? 1 : 0;
	t.element.textureAsset = this.buttonImages[i];
	var e = 0,
		r = 0;
	this.isAtmoLightOn ? (e = this.currSpot, r = 3 + this.currSpot, this.app.fire("lightOn", !0)) : (e = 3 + this.currSpot, r = this.currSpot, this.app.fire("lightOn", !1)), this.panoSperes[e].enabled = !1, this.panoSperes[r].enabled = !0
}, InteriorUi.prototype.exteriorClick = function() {
	this.app.fire("switchScene", "exterior")
}, InteriorUi.prototype.changePanoSpot = function(t) {
	this.resetCamera();
	for(var i = 0; i < this.panoSpots.length; i++) this.panoSpots[i].enabled = i >= 2 * t && i < 2 * (t + 1);
	if(this.currSpot != t) {
		var e = this.isAtmoLightOn ? 3 + this.currSpot : this.currSpot;
		this.panoSperes[e].enabled = !1;
		var r = this.isAtmoLightOn ? 3 + t : t;
		this.panoSperes[r].enabled = !0, this.currSpot = t
	}
}, InteriorUi.prototype.resetCamera = function() {
	var t = this.panoCamera.script.get("lookCamera");
	void 0 !== t && (t.targetEx = 0, t.targetEy = 90)
};
var ChangeColorUi = pc.createScript("changeColorUi");
ChangeColorUi.attributes.add("colorButtons", {
	type: "entity",
	array: !0,
	title: "ColorButtons"
}), ChangeColorUi.attributes.add("carMaterials", {
	type: "asset",
	assetType: "material",
	array: !0,
	title: "CarMaterials"
}), ChangeColorUi.attributes.add("buttonOnImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOnImages"
}), ChangeColorUi.attributes.add("buttonOffImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOffImages"
}), ChangeColorUi.prototype.initialize = function() {
	for(var t = 0; t < this.colorButtons.length; t++) this.colorButtons[t].colorIndex = t, this.colorButtons[t].button.on("click", this.changeColorClick, this);
	this.changeColor(0)
}, ChangeColorUi.prototype.update = function(t) {}, ChangeColorUi.prototype.changeColorClick = function(t) {
	console.log("changeColorClick ");
	var o = t.element.entity.colorIndex;
	this.changeColor(o)
}, ChangeColorUi.prototype.changeColor = function(t) {
	this.app.fire("changeCarMaterial", this.carMaterials[t]);
	for(var o = 0; o < this.colorButtons.length; o++) this.colorButtons[o].element.textureAsset = this.buttonOffImages[o];
	this.colorButtons[t].element.textureAsset = this.buttonOnImages[t]
};
var ChooseSceneUi = pc.createScript("chooseSceneUi");
ChooseSceneUi.attributes.add("sceneButtons", {
	type: "entity",
	array: !0,
	title: "SceneButtons"
}), ChooseSceneUi.attributes.add("buttonOnImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOnImages"
}), ChooseSceneUi.attributes.add("buttonOffImages", {
	type: "asset",
	assetType: "texture",
	array: !0,
	title: "ButtonOffImages"
}), ChooseSceneUi.prototype.initialize = function() {
	for(var e = 0; e < this.sceneButtons.length; e++) this.sceneButtons[e].sceneIndex = e, this.sceneButtons[e].button.on("click", this.chooseSceneClick, this);
	this.chooseScene(0)
}, ChooseSceneUi.prototype.update = function(e) {}, ChooseSceneUi.prototype.chooseSceneClick = function(e) {
	var t = e.element.entity.sceneIndex;
	this.chooseScene(t)
}, ChooseSceneUi.prototype.chooseScene = function(e) {
	this.app.fire("chooseScene", e);
	for(var t = 0; t < this.sceneButtons.length; t++) this.sceneButtons[t].element.textureAsset = this.buttonOffImages[t];
	this.sceneButtons[e].element.textureAsset = this.buttonOnImages[e]
};
var PanoControll = pc.createScript("panoControll");
PanoControll.attributes.add("panoSperes", {
	type: "entity",
	array: !0,
	title: "PanoSpheres"
}), PanoControll.attributes.add("panoSpots", {
	type: "entity",
	array: !0,
	title: "PanoSpots"
}), PanoControll.prototype.initialize = function() {
	this.app.on("changePanoSpot", this.onMouseDown, this)
}, PanoControll.prototype.x2 = .8, PanoControll.prototype.x = .4, PanoControll.prototype.y = .4, PanoControll.prototype.update = function(o) {}, PanoControll.prototype.changePanoSpot = function(o) {};
var PanoSpot = pc.createScript("panoSpot");
PanoSpot.attributes.add("cameraEntity", {
	type: "entity",
	title: "CameraEntity"
}), PanoSpot.attributes.add("radius", {
	type: "number",
	title: "Radius"
}), PanoSpot.attributes.add("spotIndex", {
	type: "number",
	title: "SpotIndex"
}), PanoSpot.prototype.initialize = function() {
	this.hitArea = new pc.BoundingSphere(this.entity.getPosition(), this.radius), this.ray = new pc.Ray, this.defaultForwardDirection = this.entity.forward.clone(), this.sprite = this.entity.children[0], this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.touch && this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStart, this), this.on("destroy", (function() {
		this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onMouseDown, this), this.app.touch && this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStart, this)
	}), this)
}, PanoSpot.prototype.update = function(t) {
	var i = this.cameraEntity.getPosition();
	this.entity.lookAt(i)
}, PanoSpot.prototype.doRayCast = function(t) {
	this.sprite.enabled && (this.cameraEntity.camera.screenToWorld(t.x, t.y, this.cameraEntity.camera.farClip, this.ray.direction), this.ray.origin.copy(this.cameraEntity.getPosition()), this.ray.direction.sub(this.ray.origin).normalize(), this.hitArea.intersectsRay(this.ray) && this.app.fire("changePanoSpot", this.spotIndex))
}, PanoSpot.prototype.onMouseDown = function(t) {
	t.button == pc.MOUSEBUTTON_LEFT && this.doRayCast(t)
}, PanoSpot.prototype.onTouchStart = function(t) {
	1 == t.touches.length && (this.doRayCast(t.touches[0]), t.event.preventDefault())
}, PanoSpot.prototype.anim = function() {
	this.tween && this.tween.stop(), this.tween = this.entity.tween(this.entity.getLocalScale()).to(new pc.Vec3(.6, .6, .6), 1, pc.Linear).loop(!0), this.tween.start()
};
pc.script.createLoadingScreen((function(e) {
	var t, a;
	t = ["body {", "    background-color: black;", "}", "#application-splash-wrapper {", "    position: absolute;", "    top: 0;", "    left: 0;", "    height: 100%;", "    width: 100%;", "    background-color: black;", "}", "#application-splash {", "    position: absolute;", "    top: calc(50% - 300px);", "    width: 600px;", "    left: calc(50% - 300px);", "}", "#application-splash img {", "    width: 100%;", "}", "#progress-bar-container {", "    margin: 20px auto 0 auto;", "    height: 2px;", "    width: 100%;", "    background-color: #1d292c;", "}", "#progress-bar {", "    width: 0%;", "    height: 100%;", "    background-color: #f60;", "}", "@media (max-width: 480px) {", "    #application-splash {", "        width: 170px;", "        left: calc(50% - 85px);", "    }", "}"].join("\n"), (a = document.createElement("style")).type = "text/css", a.styleSheet ? a.styleSheet.cssText = t : a.appendChild(document.createTextNode(t)), document.head.appendChild(a),
		function() {
			var e = document.createElement("div");
			e.id = "application-splash-wrapper", document.body.appendChild(e);
			var t = document.createElement("div");
			t.id = "application-splash", e.appendChild(t), t.style.display = "none"
		}(), e.on("preload:start", (function() {
			var t, a = document.getElementById("application-splash"),
				n = 10,
				o = document.createElement("img");
			t = e.assets.find("T19 FL MY_Web GL_0001.jpg");
			var p = setInterval((function() {
				t = e.assets.find("T19 FL MY_Web GL_00" + n.toString() + ".jpg"), o.src = t.getFileUrl(), 25 === (n += 1) && (n = 26, clearInterval(p))
			}), 200);
			t && (a.childNodes.length > 0 ? a.insertBefore(o, a.childNodes[0]) : a.appendChild(o), o.onload = function() {
				a.style.display = "block"
			})
		})), e.on("preload:end", (function() {
			e.off("preload:progress")
		})), e.on("start", (function() {
			var e = document.getElementById("application-splash-wrapper");
			e.parentElement.removeChild(e)
		}))
}));